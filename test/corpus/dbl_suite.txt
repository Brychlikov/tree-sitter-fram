=====
ok0000_emptyFile.fram
=====
-----
(source_file)

=====
ok0001_id.fram
=====
let id = fn x => x
-----
(source_file
  (def_list
    (def_let
      (lid)
      (ex_fn
        (lid)
        (lid)))))

=====
ok0002_poly.fram
=====
let id = fn x => x
let x = id id (id ())
-----
(source_file
  (def_list
    (def_let
      (lid)
      (ex_fn
        (lid)
        (lid)))
    (def_let
      (lid)
      (ex_app
        (lid)
        (lid)
        (ex_app
          (lid)
          (ctor_unit))))))

=====
ok0003_local.fram
=====
let x =
  let id = fn x => x in
  id ()
-----
(source_file
  (def_list
    (def_let
      (lid)
      (ex_def_list
        (def_list
          (def_let
            (lid)
            (ex_fn
              (lid)
              (lid))))
        (ex_app
          (lid)
          (ctor_unit))))))

=====
ok0004_fnArg.fram
=====
let id = fn x => x
let x = id (fn y => y) ()
-----
(source_file
  (def_list
    (def_let
      (lid)
      (ex_fn
        (lid)
        (lid)))
    (def_let
      (lid)
      (ex_app
        (lid)
        (ex_fn (lid) (lid))
        (ctor_unit)))))

=====
ok0005_let.fram
:skip
=====
let x =
  let y = (fn z => z) () in
  y
-----
(source_file)

=====
ok0006_fnArg.fram
:skip
=====
let f = fn g => fn x => g x
let x = f (fn x => x) ()
-----
(source_file)

=====
ok0007_letArg.fram
=====
let x = (fn x => ()) (let f = fn x => x in f ())
-----
(source_file
  (def_list
    (def_let
      (lid)
      (ex_app
        (ex_fn (lid) (ctor_unit))
        (ex_def_list
          (def_list (def_let
            (lid)
            (ex_fn (lid) (lid))))
          (ex_app
            (lid)
            (ctor_unit)))))))

=====
ok0008_idHandler.fram
=====
let _ = handle id = effect x / r => r x in id ()
-----
(source_file
  (def_list
    (def_let
      (wildcard)
      (ex_def_list
        (def_list
          (def_handle
            (lid)
            (ex_effect
              (lid)
              (resumption (lid))
              (ex_app
                (lid)
                (lid)))))
        (ex_app (lid) (ctor_unit))))))

=====
ok0009_purityRestriction.fram
:skip
=====
let id =
  let id2 = fn x => x in
  id2 id2

let _ = id id ()
-----
(source_file)

=====
ok0010_implicit.fram
=====
implicit ~a

let foo = ~a

let _ =
  let ~a = () in
  foo
-----
(source_file
  (def_list
    (def_implicit (tlid))
    (def_let (lid) (tlid))
    (def_let (wildcard)
      (ex_def_list
        (def_list
          (def_let
            (tlid)
            (ctor_unit)))
        (lid)))))

=====
ok0011_implicit.fram
=====
implicit ~id

let id = fn x => ~id (~id x)

let _ =
  let ~id = fn y => y in
  id ()
-----
(source_file 
  (def_list
    (def_implicit (tlid))
    (def_let
      (lid)
      (ex_fn
        (lid)
        (ex_app
          (tlid)
          (ex_app (tlid) (lid)))))
    (def_let
      (wildcard)
      (ex_def_list
        (def_list
          (def_let
            (tlid)
            (ex_fn (lid) (lid))))
        (ex_app (lid) (ctor_unit))))))

=====
ok0012_adt.fram
=====
data T = I
-----
(source_file
  (def_list
    (def_data
      (uid_path (uid))
      (ctor_decl (uid)))))

=====
ok0013_emptyADT.fram
=====
data E =

data M =
| None
| Some of E
-----
(source_file
  (def_list
    (def_data
      (uid_path (uid)))
    (def_data
      (uid_path (uid))
      (ctor_decl (uid))
      (ctor_decl (uid) (uid_path (uid))))))

=====
ok0014_arrows.fram
=====
data X = I

data T =
| Pure   of (X -> X)
| Impure of (X ->[] X)
-----
(source_file
  (def_list
    (def_data
      (uid_path (uid))
      (ctor_decl
        (uid)))
    (def_data
      (uid_path (uid))
      (ctor_decl
        (uid)
        (ty_expr_arr
          (uid_path (uid))
          (uid_path (uid))))
      (ctor_decl
        (uid)
        (ty_expr_arr
          (uid_path (uid))
          (ty_expr_app
            (ty_effect)
            (uid_path (uid))))))))


=====
ok0015_ctor.fram
=====
data A =
| A

data B =
| B of A

data C =
| C of (A -> B), A

data D =
| D of (A ->[] C)

let _ = D (C B)
-----
(source_file
  (def_list
    (def_data
      (uid_path (uid))
      (ctor_decl (uid)))
    (def_data 
      (uid_path (uid))
      (ctor_decl 
        (uid)
        (uid_path (uid))))
    (def_data
      (uid_path (uid))
      (ctor_decl
        (uid)
        (ty_expr_arr
          (uid_path (uid))
          (uid_path (uid)))
        (uid_path (uid))))
    (def_data
      (uid_path (uid))
      (ctor_decl
        (uid)
        (ty_expr_arr
          (uid_path (uid))
          (ty_expr_app 
            (ty_effect)
            (uid_path (uid))))))
    (def_let
      (wildcard)
      (ex_app
        (uid)
        (ex_app
          (uid)
          (uid))))))

=====
ok0016_trivialMatch.fram
=====
let _ =
  match fn x => x with
  | f => f
  end ()
-----
(source_file
  (def_list
    (def_let
      (wildcard)
      (ex_app
        (ex_match
          (ex_fn (lid) (lid))
          (match_clause
            (lid)
            (lid)))
        (ctor_unit)))))

=====
ok0017_wildcard.fram
:skip
=====
let _ = match () with _ => () end
-----
(source_file)

=====
ok0018_namePattern.fram
:skip
=====
implicit ~n

let foo = fn x => ~n

let _ =
  match () with
  | ~n => foo ()
  end
-----
(source_file)

=====
ok0019_simplePattern.fram
:skip
=====
data Col = R | G | B

let rot = fn c =>
  match c with
  | R => G
  | G => B
  | B => R
  end
-----
(source_file)

=====
ok0020_patternMatch.fram
:skip
=====
data A = C1 | C2

data B = X | Y of A

let foo = fn x =>
  match x with
  | X   => C1
  | Y x => x
  end

let _ = foo (Y C2)
-----
(source_file)

=====
ok0021_simpleMatch.fram
:skip
=====
data A = A
data B = B

let _ = match A with A => B end
-----
(source_file)

=====
ok0022_deepMatch.fram
:skip
=====
data A = A | T
data P = P of A, A

let foo = fn p =>
  match p with
  | P x T => x
  | P T y => y
  | _     => A
  end

let _ = foo (P T A)
-----
(source_file)

=====
ok0023_letPattern.fram
:skip
=====
data T = X | Y
data P = P of T, T

let P x y = P X Y
-----
(source_file)

=====
ok0024_letFunc.fram
:skip
=====
let id x = x
-----
(source_file)

=====
ok0025_letFuncImplicit.fram
:skip
=====
implicit ~f

let foo x = ~f x

let ~f x = x

let _ =
  foo ()
-----
(source_file)

=====
ok0026_funSugar.fram
:skip
=====
let foo f x = f x x
let bar g = foo (fn x y => g y x) ()
let _ = bar (fn x y => x)
-----
(source_file)

=====
ok0027_explicitApp.fram
:skip
=====
implicit ~n
let foo = ~n
let _ = foo { ~n = () }
-----
(source_file)

=====
ok0028_patArg.fram
:skip
=====
data Bool = True | False
data P = P of Bool, Bool

let fst (P x _) = x
-----
(source_file)

=====
ok0029_handle.fram
:skip
=====
let f p = p

implicit ~f

let test f =
  f (~f ())

let tauto _ =
  handle x = effect x / r => ()
  in test {~f=x} f
-----
(source_file)

=====
ok0030_bt.fram
:skip
=====
data Bool = False | True

let not b =
  match b with
  | True  => False
  | False => True
  end

let band b1 b2 =
  match b1 with
  | True  => b2
  | False => False
  end

let bor b1 b2 = not (band (not b1) (not b2))

let iff b1 b2 =
  match b1 with
  | True  => b2
  | False => not b2
  end

let form p q r =
  iff (band p (bor q r)) (bor (band p q) (band p r))

implicit ~flip

let test f =
  f (~flip ()) (~flip ()) (~flip ())

let tauto _ =
  handle ~flip = effect x / r => band (r True) (r False)
  in test form

let _ = tauto ()
-----
(source_file)

=====
ok0031_explicitArg.fram
=====
let ~f {~x} = ~x
let f {~f=g} = g
let h ~x = f ()
-----
(source_file
  (def_list
    (def_let
      (ex_app
        (tlid)
        (ex_record
          (fld_name (tlid))))
      (tlid))
    (def_let 
      (ex_app
        (lid)
        (ex_record
          (fld_nameval
            (tlid)
            (lid))))
      (lid))
    (def_let
      (ex_app 
        (lid)
        (tlid))
      (ex_app
        (lid)
        (ctor_unit)))))


=====
ok0032_dataArg.fram
=====
data Option X =
| None
| Some of X
-----
(source_file
  (def_list
    (def_data
      (ty_expr_app
        (uid_path
          (uid))
        (uid_path
          (uid)))
      (ctor_decl
        (uid))
      (ctor_decl
        (uid)
        (uid_path
          (uid))))))

=====
ok0033_higherKinds.fram
:skip
=====
data Option X =
| None
| Some of X

data Pair X Y = Pair of X, Y

data ST S M X = ST of (S ->[] M (Pair S X))

let run s0 (ST m) =
  match m s0 with
  | None            => None
  | Some (Pair _ x) => Some x
  end
-----
(source_file)

=====
ok0034_schemes.fram
:skip
=====
data Bool = False | True
data A = A of (({~x : Bool} -> Bool) ->[] Bool)

let foo (A g) = g ~x
-----
(source_file)

=====
ok0035_schemes.fram
:skip
=====
data T X = T of (({type Y} -> Y) -> X)

let foo = T (fn em => em)
-----
(source_file)

=====
ok0036_schemeAnnot.fram
:skip
=====
let foo (id : {type X} -> X -> X) = id id
let _ = foo (fn x => x) ()
-----
(source_file)

=====
ok0037_checkScheme.fram
:skip
=====
let foo (f : (({type X} -> X) -> _) -> _) =
  f (fn (x : {type Y} -> _) => x)
-----
(source_file)

=====
ok0038_explicitArg.fram
:skip
=====
let id {type X} (x : X) = x
-----
(source_file)

=====
ok0039_polymorphicImplicit.fram
:skip
=====
let foo {~id : {type X} -> X -> X} = ~id ()

let _ = foo {~id = fn x => x}

let ~id x = x

let _ = foo
-----
(source_file)

=====
ok0040_polymorphicFields.fram
:skip
=====
data I = I of ({type X} -> X -> X)

let foo (I id) = id ()

let bar = foo (I (fn x => x))
-----
(source_file)

=====
ok0041_existentialTypes.fram
:skip
=====
data Option X =
| None
| Some of X

let option_map f opt =
  match opt with
  | None   => None
  | Some x => Some (f x)
  end

data Pair X Y =
| Pair of X, Y

data Stream X =
| Stream of {type S}, S, (S ->[] Option (Pair X S))

let nil = Stream () (fn _ => None)

let cons x (Stream s f) =
  let view st =
    match st with
    | None   => Some (Pair x (Some s))
    | Some s => option_map (fn (Pair x st) => Pair x (Some st)) (f s)
    end
  in
  Stream None view

let repeat x = Stream () (fn _ => Some (Pair x ()))

let view (Stream s f) =
  match f s with
  | None => None
  | Some (Pair x s) => Some (Pair x (Stream s f))
  end
-----
(source_file)

=====
ok0042_existentialTypes.fram
:skip
=====
data Ex = Ex of {type X}, X

let foo (f : {type A} -> A -> A) (Ex x) = Ex (f x)
-----
(source_file)

=====
ok0043_implicitCtorArgs.fram
:skip
=====
data Vec X Y = Vec of { ~x : X, ~y : Y }

let foo f Vec = f ~x ~y
-----
(source_file)

=====
ok0044_implicitCtorArgs.fram
:skip
=====
data Vec X Y = Vec of { ~x : X, ~y : Y }

data Box X = Box of X

let foo (Vec { ~x, ~y = Box v }) = ~x v
-----
(source_file)

=====
ok0045_recursiveData.fram
:skip
=====
data rec List X =
| Nil
| Cons of X, List X

let tl xs =
  match xs with
  | Nil       => Nil
  | Cons _ xs => xs
  end

let _ = tl (Cons () (Cons () (Cons () Nil)))
-----
(source_file)

=====
ok0046_mutualDataRec.fram
:skip
=====
rec
  data Tree X = Node of X, TreeList X
  data TreeList X =
    | Nil
    | Cons of Tree X, TreeList X
end
-----
(source_file)

=====
ok0047_namedParam.fram
:skip
=====
data Vec X = Vec of { x : X, y : X }

let get_x (Vec { x }) = x
let get_y (Vec { y }) = y
-----
(source_file)

=====
ok0048_explicitTypeInst.fram
:skip
=====
let id {X} (x : X) = x

let id2 {X} = id {X=X->X} (id {X})
-----
(source_file)

=====
ok0049_expilicitInstOrder.fram
:skip
=====
data Pair X Y = Pair of X, Y

let swap {A,B} (Pair x y) = Pair {Y=A,X=B} y x
-----
(source_file)

=====
ok0050_typeArgRename.fram
:skip
=====
let id {X=Y} (x : Y) = x

let id2 {Z} = id {X=Z}
-----
(source_file)

=====
ok0051_existentialTypePattern.fram
:skip
=====
data Pair X Y = Pair of X, Y

data Stream X = Stream of {St}, St, (St ->[] Pair X St)

let fst (Pair x _) = x
let snd (Pair _ y) = y

let head (Stream {St} (st : St) f) = fst (f st)

let suffixes {X=Z} (Stream {St=X} st f) =
  Stream {St=X,X=Stream Z} st (fn st => Pair (Stream st f) (snd (f st)))
-----
(source_file)

=====
ok0052_emptyMatch.fram
:skip
=====
data Empty =

let ofEmpty (x : Empty) =
  match x with end

data rec T = C of T

let foo x = C (ofEmpty x)
-----
(source_file)

=====
ok0053_firstClassHandler.fram
:skip
=====
let hId = handler effect x / r => r x end

handle id with hId

let _ = id ()
-----
(source_file)

=====
ok0054_firstClassHandler.fram
:skip
=====
let runH {A} h (f : {E} -> (A ->[|E] A) ->[|E] _) =
  handle x with h in
  f x

let _ = runH (handler effect x / r => r () end) (fn op => op ())
-----
(source_file)

=====
ok0055_complexHandlers.fram
:skip
=====
data Unit = I

data State E X = State of
  { get : Unit ->[|E] X
  , put : X ->[|E] Unit
  }

let hState s =
  handler
    State
      { get = effect I / r => fn s => r s s
      , put = effect s / r => fn _ => r I s
      }
  return  x => fn _ => x
  finally f => f s
  end
-----
(source_file)

=====
ok0056_complexHandlers.fram
:skip
=====
data Unit = I

data State E X = State of
  { get    : Unit ->[|E] X
  , put    : X ->[|E] Unit
  , update : (X ->[|E] X) ->[|E] Unit
  }

let hState s =
  handler
    let get I = effect / r => fn s => r s s
    let put s = effect / r => fn s => r I s
    let update f = put (f (get I))
    in
    State { get, put, update }
  return  x => fn _ => x
  finally f => f s
  end
-----
(source_file)

=====
ok0057_dataArgLabels.fram
:skip
=====
data Unit = I

data State (effect E) (type T) = State of
  { get    : Unit ->[E] T
  , put    : T ->[E] Unit
  , update : {R} -> (T ->[E|R] T) ->[E|R] Unit
  }

let hState s =
  handler
    let get I = effect / r => fn s => r s s
    let put s = effect / r => fn s => r I s
    let update f = put (f (get I))
    in
    State { get, put, update }
  return  x => fn _ => x
  finally f => f s
  end
-----
(source_file)

=====
ok0058_unitState.fram
:skip
=====
data Unit = I

data State (effect E) X = State of
  { get : Unit ->[E] X
  , put : X ->[E] Unit
  }

let id x = x

let unitStateCap = State {effect = [], get = id, put = id}
-----
(source_file)

=====
ok0059_effectArg.fram
:skip
=====
let id {effect} x = x

let id2 {effect = X} = id {effect = X}

let hId = handler id2 end
-----
(source_file)

=====
ok0060_returnFinally.fram
:skip
=====
data Unit = I

data State (effect E) X = State of
  { get : Unit ->[E] X
  , put : X ->[E] Unit
  }

let hState (comp : {effect=E} -> State E _ ->[E|_] _) initSt =
  handle st = State
    { get = effect I / r => fn s => r s s
    , put = effect s / r => fn _ => r I s
    }
  return  x => fn _ => x
  finally f => f initSt
  in
  comp st
-----
(source_file)

=====
ok0061_returnFinallyMatch.fram
:skip
=====
data T = A | B

let _ =
  handle x = A
  return A => B
  return B => A
  finally A => B
  finally B => A
  in
  x
-----
(source_file)

=====
ok0062_theLabel.fram
:skip
=====
let theLabel {effect} {label=x} = x
-----
(source_file)

=====
ok0064_typeAnnot.fram
:skip
=====
data T = A

let foo f =
  (f : ({type A} -> A -> A) -> T) (fn x => x)

let _ = foo (fn id => id id A)
-----
(source_file)

=====
ok0066_method.fram
:skip
=====
data Vec T = Vec of { x : T, y : T }

method x = let Vec { x } = self in x
method y { self = Vec { y } } = y

let swap (v : Vec _) = Vec { x = v.y, y = v.x }
-----
(source_file)

=====
ok0067_pureMethod.fram
:skip
=====
data T = A
data U = B

method id {self : T} = A

data Pair X Y = Pair of X, Y

method snd {self = Pair _ x} = x

let poly = Pair (A).id (fn x => x)

let bar = Pair (poly.snd A) (poly.snd B)
-----
(source_file)

=====
ok0068_shadowCtors.fram
:skip
=====
data T = C
data S = C

let f (x : T) =
  match x with
  | C => C
  end
-----
(source_file)

=====
ok0069_effectCtorArg.fram
:skip
=====
data T (effect E) = C of (Unit ->[E] Unit)

let f {E} (C g : T E) = g
-----
(source_file)

=====
ok0070_effectMethodArg.fram
:skip
=====
data State (effect E) X = State of
  { get : Unit ->[E] X
  , put : X ->[E] Unit
  }

method get {E, self = State { get } : State E _} = get
method put {E, self = State { put } : State E _} = put

method update {E, self : State E _} f =
  self.put (f (self.get ()))

method updateTwice {E, self : State E _} f =
  let _ = self.update f in
  self.update f
-----
(source_file)

=====
ok0071_numbers.fram
:skip
=====
let _ = 0
let _ = 0x123
let _ = 0B10
let _ = 42
let _ = 0o555

let foo (x : Int) = x

let _ = foo 13
-----
(source_file)

=====
ok0072_strings.fram
:skip
=====
let _ = ""
let _ = "'"
let _ = "\\"
let _ = "\""
let _ = "\n"
let _ = "\x13\X42"
let _ = "\0\n\b\t\r\v\a\f"

let foo (x : String) = x

let _ = foo "42"
-----
(source_file)

=====
ok0073_extern.fram
:skip
=====
let addInt = extern dbl_addInt : Int -> Int -> Int

let _ = addInt 13 42
-----
(source_file)

=====
ok0074_implicitWithType.fram
:skip
=====
data State (effect E) X = State of
  { get : Unit ->[E] X
  , put : X ->[E] Unit
  }

method get {E, self = State { get } : State E _ } = get
method put {E, self = State { put } : State E _ } = put

implicit ~st { State_Eff } : State State_Eff _

let update f = ~st.put (f (~st.get ()))
-----
(source_file)

=====
ok0075_effectsFromImplicits.fram
:skip
=====
data StateSig (effect E) X = State of
  { get : Unit ->[E] X
  , put : X ->[E] Unit
  }

method get {State, self = State { get } : StateSig State _ } = get
method put {State, self = State { put } : StateSig State _ } = put

implicit ~st {State} : StateSig State _

let update f =
  ~st.put (f (~st.get ()))

let updateTwice f =
  let _ = update f in
  update f
-----
(source_file)

=====
ok0076_ifExpr.fram
=====
data Bool = True | False

let not x = if x then False else True
-----
(source_file
  (def_list
    (def_data
      (uid_path (uid))
      (ctor_decl (uid))
      (ctor_decl (uid)))
    (def_let
      (ex_app (lid) (lid))
      (ex_if
        (lid)
        (uid)
        (uid)))))

=====
ok0077_effectResume.fram
:skip
=====
let h = handler effect x => resume x end
-----
(source_file)

=====
ok0078_unitMethods.fram
:skip
=====
method unit { self = () } = ()

let _ = ().unit
-----
(source_file)

=====
ok0079_impureMethod.fram
:skip
=====
data U = I

method foo {self = I} = I

let baz I (x : U) = x.foo
-----
(source_file)

=====
ok0080_moduleDef.fram
:skip
=====
module X
  let     f x = x
  pub let id  = f
  pub let x   = 42
end

open X

let z = id x
-----
(source_file)

=====
ok0081_nestedModule.fram
:skip
=====
module Z
  pub let id x = x
end

module X
  let x = 42

  pub module Y
    pub open Z
    pub let x = id x
  end
end

open X.Y

let y = id x
-----
(source_file)

=====
ok0082_moduleDataDef.fram
:skip
=====
module X
  pub data T     = C
  pub data rec N = Z | S of N
  pub data P     = P of T, T
  pub data R     = R of { l : T }

  pub let id x = x
end

let f1 (C : X.T) = ()
let f2 X.C = ()

let X.C = X.id X.C
let X.P x y = X.P X.C X.C

let r = X.R { l = X.C }

open X

let g C = C

let s (n : N) = S n
-----
(source_file)

=====
ok0083_pubPatternMatch.fram
:skip
=====
data P = P of Int, Int
data R = R of { x : Int }

module M
  pub let P x ~n      = P 42 0
  pub let R { x = y } = R { x = 42 }
end

let x = M.x
let y = M.y

let foo {~n} () = ~n

open M

let z = foo ()
-----
(source_file)

=====
ok0084_operators.fram
:skip
=====
let (+) = (extern dbl_addInt : Int -> Int -> Int)
let (-) = (extern dbl_subInt : Int -> Int -> Int)
let (- .) = (fn x => 0 - x)
let x = 5 + 3
let y = 5 - 3
let z = -5
-----
(source_file)

=====
ok0085_letChecked.fram
:skip
=====
let f x =
  let y =
    match x with
    | _ => x
    end
  in y
-----
(source_file)

=====
ok0086_optionState.fram
:skip
=====
data Option A = None | Some of A

data State (effect E) X = State of
  { get    : Unit ->[E] X
  , put    : X ->[E] Unit
  }

implicit ~st {E_st} : State E_st _

let get x =
  let (State { get }) = ~st in
  get x

let put x =
  let (State { put }) = ~st in
  put x

handle ~st =
  let get = effect x / r => fn s => r s  s
  let put = effect s / r => fn _ => r () s
  in State { get, put }
  return  x => fn _ => x
  finally c => c None

let putSome f =
  put (Some f)

let _ =
  match get () with
  | None   => ()
  | Some f => f ()
  end
-----
(source_file)

=====
ok0087_opratorOverloading.fram
:skip
=====
method add = (extern dbl_addInt : Int -> Int -> Int) self
method add = (extern dbl_strCat : String -> String -> String) self

method fn (+) = add

let _ = 2 + 2
let _ = "a" + "b"
-----
(source_file)

=====
ok0088_abstractData.fram
:skip
=====
module M
  abstr data T = C | D
end

let f (x : M.T) = x
-----
(source_file)

=====
ok0089_pubPat.fram
:skip
=====
module M
  data Pair X Y = Pair of X, Y
  
  let Pair (pub x) y = Pair 42 0
end

let x = M.x
-----
(source_file)

=====
ok0090_lists.fram
:skip
=====
data rec List X = [] | (::) of X, List X

let tl xs =
  match xs with
  | []      => []
  | _ :: xs => xs
  end

let swap_if_two xs =
  match xs with
  | [x,y] => [y,x]
  | _     => xs
  end

let dup_hd xs =
  match xs with
  | []        => []
  | (::) x xs => x :: x :: xs
  end
-----
(source_file)

=====
ok0091_namedParamMethod.fram
:skip
=====
data rec List A = Nil | Cons of A, List A

let fix {type A, type B, type E} f =
  data rec Fix = Fix of (Fix -> A ->[|E] B)
  let fi ix x = let Fix fi = ix in f (fi ix) x in
  fi (Fix fi)

let fold_left f acc xs = fix (fn fold acc xs =>
  match xs with
  | Nil       => acc
  | Cons x xs => fold (f acc x) xs
  end) acc xs 

method toString = (extern dbl_intToString : Int -> String) self
method add = (extern dbl_strCat : String -> String -> String) self

method toString {A, method toString : A ->[] String, self : (List A) } =
 fold_left (fn (acc : String) (x : A) => acc.add x.toString) "" self


let x = Cons 1 (Cons 2 Nil)
let _ = x.toString
-----
(source_file)

=====
ok0092_multipleNamedMethodParams.fram
:skip
=====
data Pair A B = (,) of A, B

let (+) = (extern dbl_strCat : String -> String -> String)

method toString = (extern dbl_intToString : Int -> String) self

method toString {A, B}
  {method toString : A ->[] String}
  {method toString : B ->[] String}
  {self = (x : A, (y : B))} =
    "(" + x.toString + "," + y.toString + ")"

let _ = (13, 42).toString-----
(source_file)

=====
ok0093_specialBinops.fram
:skip
=====
let printStrLn = extern dbl_printStrLn : String ->[IO] Unit
let printStr   = extern dbl_printStr   : String ->[IO] Unit

data Bool = False | True

let print b s = let _ = printStr s in b

let _ =
  if print True  "1Succ" || print True  "FAIL"
  then printStrLn "ess!1" else printStrLn "FAIL"
let _ =
  if print True  "2Succ" || print False "FAIL"
  then printStrLn "ess!2" else printStrLn "FAIL"
let _ =
  if print False "3Succ" || print True  "3333"
  then printStrLn "ess!3" else printStrLn "FAIL"
let _ =
  if print False "4Succ" || print False "4444"
  then printStrLn "FAIL!" else printStrLn "ess!4"

let _ =
  if print True  "5Succ" && print True  "5555"
  then printStrLn "ess!5" else printStrLn "FAIL"
let _ =
  if print True  "6Succ" && print False "6666"
  then printStrLn "FAIL!" else printStrLn "ess!6"
let _ =
  if print False "7Succ" && print True  "FAIL"
  then printStrLn "FAIL!" else printStrLn "ess!7"
let _ =
  if print False "8Succ" && print False "FAIL"
  then printStrLn "FAIL!" else printStrLn "ess!8"

let _ = printStr "semi"; printStrLn "colon"

// @stdout:1Success!1
// @stdout:2Success!2
// @stdout:3Succ3333ess!3
// @stdout:4Succ4444ess!4
// @stdout:5Succ5555ess!5
// @stdout:6Succ6666ess!6
// @stdout:7Success!7
// @stdout:8Success!8
// @stdout:semicolon

-----
(source_file)

=====
ok0094_unaryIf.fram
:skip
=====
let printStrLn = extern dbl_printStrLn : String ->[IO] Unit
let printStr   = extern dbl_printStr   : String ->[IO] Unit

data Bool = False | True

let _ =
  if (printStr "Succ"; False) then
    if True
    then printStr "FAIL"
    else printStr "FAIL";
  printStrLn "ess!"

// @stdout:Success!
-----
(source_file)

=====
ok0095_wildcardTypeParam.fram
:skip
=====
data T _ =  A-----
(source_file)

=====
ok0096_fixTypeAnnot.fram
:skip
=====
data rec Fix (F : type -> type) = Fix of F (Fix F)
-----
(source_file)

=====
ok0097_recursion.fram
:skip
=====
data rec List A = [] | (::) of A, List A

let rec map f xs =
  match xs with
  | []      => []
  | x :: xs => f x :: map f xs
  end

let _ = map (fn _ => ()) (map (fn _ => "a") [1,2,3])
-----
(source_file)

=====
ok0098_mutualRecursion.fram
:skip
=====
data rec Nat = Z | S of Nat
data Bool = False | True

rec
  let odd n =
    match n with
    | Z   => False
    | S n => even n
    end
  
  let even n =
    match n with
    | Z   => True
    | S n => odd n
    end
end

let _ = even (S (S (S (S (S Z)))))
-----
(source_file)

=====
ok0099_nestedEffArrows.fram
:skip
=====
let foo (f : Unit ->[] Unit ->[] Unit) = f () ()
let foo (f : Unit ->[] ({X} -> X) -> Unit) = ()
-----
(source_file)

=====
ok0100_polymorphicRecursion.fram
:skip
=====
data Sqr A = (,) of A, A
data rec Tree A = Leaf | Node of Tree (Sqr A)

let rec (map : {A,B,E} -> (A ->[|E] B) -> Tree A ->[|E] Tree B) =
  fn f t =>
    match t with
    | Leaf   => Leaf
    | Node t => Node (map (fn (x, y) => (f x, f y)) t)
    end
-----
(source_file)

=====
ok0101_implicitParamsRecord.fram
:skip
=====
data Vec _ = { x : Unit, y : Unit }

let swap (v : Vec _) = Vec { x = v.y, y = v.x }
-----
(source_file)

=====
ok0102_simpleRecord.fram
:skip
=====
data A = B | C

data T = { x : A, y : A }

let swap (v : T) = T { x = v.y, y = v.x }
-----
(source_file)

=====
ok0103_genericRecords.fram
:skip
=====
data Vec T = { x : T, y : T }

let swap (v : Vec _) = Vec { x = v.y, y = v.x }
-----
(source_file)

=====
ok0104_chars.fram
:skip
=====
let _ = 'a'
let _ = '''
let _ = '\n'
let _ = '\t'
let _ = '\\'

let foo (x : Char) = x

let _ = foo '1'
-----
(source_file)

=====
ok0105_recFunWithNamedParam.fram
:skip
=====
let rec f {x} = x
-----
(source_file)

=====
ok0106_recursiveMethod.fram
:skip
=====
rec
  data List X = [] | (::) of X, List X

  method map {self : List _} f =
    match self with
    | []      => []
    | x :: xs => x :: xs.map f
    end
end
-----
(source_file)

=====
ok0107_polymorphicRecursion.fram
:skip
=====
data Sqr A = (,) of A, A
data rec Tree A = Leaf | Node of Tree (Sqr A)

method rec map {A,B, self : Tree A} (f : A ->[|_] B) =
  match self with
  | Leaf   => Leaf
  | Node t => Node (t.map (fn (x, y) => (f x, f y)))
  end : Tree B
-----
(source_file)

=====
ok0108_modulePattern.fram
:skip
=====
data Bool = False | True

data Ord = Lt | Eq | Gt

data rec List A = [] | (::) of A, List A

data Set Elem = Set of
  { T
  , empty : T
  , method add : T -> Elem ->[] T
  , method mem : T -> Elem ->[] Bool
  }

let add xs x = x :: xs

let rec mem compare xs x =
  match xs with
  | []      => False
  | y :: xs =>
    match compare x y with
    | Eq => True
    | _  => mem compare xs x
    end
  end

let make {Elem} (compare : Elem -> Elem ->[] Ord) =
  Set { T = List Elem, empty = [], method add = add, method mem = mem compare }

let compare (_ : Unit) (_ : Unit) = Eq

let Set { module UnitSet } = make compare

let m = UnitSet.empty.add ()

let f () = m.mem ()
-----
(source_file)

=====
ok0109_fieldPattern.fram
:skip
=====
data T = C of { S, x : Int }

module M
  pub let C { S, x } = C { S = Unit, x = 42 }
end

let y = M.x

let f (x : M.S) = x
-----
(source_file)

=====
ok0110_publicModulePattern.fram
:skip
=====
module M
  data T = C of { x : Int }
  pub let C { module N } = C { x = 42 }
end

let x = M.N.x
-----
(source_file)

=====
ok0111_optionalParams.fram
:skip
=====
pub data Option A = None | Some of A
pub method add = (extern dbl_addInt : Int -> Int -> Int) self
pub method fn (+) = add

let f {?x} = x
let a = f
let b = f {x=2}

let g {?x : Int} () = 
  match x with
  | Some n => n + 2
  | None => 42
  end
let c = g ()
let d = g {x=2} ()
let e = g {?x = Some 2} ()

let h {?x} () =
  match x with
  | Some n => n
  | None => None
  end

let a = h {x=Some 2}
-----
(source_file)

=====
ok0112_pureRecord.fram
:skip
=====
data Vec X = { x : X, y : X }

let checkPure (f : _ -> _) = ()

let _ = checkPure (fn (v : Vec Unit) => v.x)
let _ = checkPure (fn (v : Vec Unit) => v.y)
-----
(source_file)

=====
ok0113_pureMatchingNonrecUVar.fram
:skip
=====
data T = C of _
let get (C x) = x

let checkPure (f : _ -> _) = ()

let _ = checkPure get
let _ = C ()
-----
(source_file)

=====
ok0114_pureTail.fram
:skip
=====
data rec List X = [] | (::) of X, List X

let tail xs =
  match xs with
  | []      => []
  | _ :: xs => xs
  end

let checkPure (f : _ -> _) = ()

let _ = checkPure (tail : List Unit -> List Unit)
-----
(source_file)

=====
ok0115_purePatternMatching.fram
:skip
=====
rec
  data Trie X = Node of X, TrieList X
  data TrieList X = [] | (::) of Trie X, TrieList X
end

let get t =
  match t with
  | Node _ (_ :: _ :: Node _ (_ :: Node x _ :: _) :: _) => x
  | _ => ()
  end

let checkPure (f : _ -> _) = ()

let _ = checkPure get
-----
(source_file)

